
* 제네릭(generic)

- 제네릭이란 클래스나 인터페이스 선언에 유형 매개변수가 들어있는 클래스를 뜻합니다.

- 제네릭 타입은 클래스 또는 인터페이스 이름 뒤에 "<>"부호가 붙고, 그 사이에 파라미터가 위치합니다.

- 자바 5 버전부터 제네릭이 도입된 이후에는 제네릭 기능으로 인해 클래스에 원하지 않는 데이터형이 들어가는 것을 방지할 수 있고, 반대로 값을 가져올 때도 형 변환을 하지 않게 되었습니다.

- 제네릭은 형 안정성(type safety)을 위해 사용합니다.









* Collection

- 자바 프로그램에서 객체를 객체들의 모음 형식으로 관리할 수 있는 방법을 제공하는 클래스들을 컬렉션이라고 부릅니다.

- 컬렉션은 배열과 유사하지만 데이터를 저장/조회/수정/삭제하는 작업을 쉽게 처리할 수 있으며, 동적인 크기를 갖는다는 장점이 있습니다.

- 컬렉션 계열은 Set/List/Map 등의 인터페이스가 있으며 이를 구현한 클래스를 이용하면 객체들을 모음저장할 수 있습니다.




* List 컬렉션

- List 컬렉션은 객체를 인덱스로 관리하기 때문에 객체를 저장하면 자동으로 인덱스 번호가 부여되고 인덱스를 통해 객체를 검색, 삭제할 수 있는 기능을 제공합니다.

- List 는 객체를 순서대로 저장하며 동일한 객체를 중복 저장할 수 있습니다.




* List 계열 주요 메서드

- 객체 추가 기능

1. add(E e): 주어진 객체를 List의 맨 끝부분에 추가.
2. add(int index, E e): 주어진 인덱스에 객체를 추가.
3. set(int index, E e): 주어진 인덱스에 저장된 객체를 주어진 객체로 바꿈.

- 객체 검색 기능

1. contains(Object o): 주어진 객체가 저장되어있는지의 여부를 판단.
2. get(int index): 주어진 인덱스에 저장되어 있는 객체를 리턴.
3. isEmpty(): 컬렉션이 비어있는지의 여부를 판단.
4. size(): 저장되어 있는 전체 객체 수를 리턴.

- 객체 삭제 기능

1. clear(): 저장된 모든 객체를 삭제.
2. remove(int index): 주어진 인덱스에 저장된 객체를 삭제.
3. remove(Object o): 주어진 객체를 삭제.


* ArrayList

- ArrayList 클래스는 List 인터페이스의 구현 클래스로 ArrayList에 객체를 추가하면 객체가 인덱스로 관리됩니다.

- 일반 배열과 ArrayList는 인덱스로 객체를 관리한다는 점에서는 유사하지만 배열은 생성될 때 크기가 고정되고, 사용 중에 크기를 변경할 수 없지만 ArrayList는 저장 용량을 초과한 객체들이 들어오면 자동으로 저장 용량을 증가시킵니다.

- 기본 생성자로 ArrayList 객체를 생성하면 내부에 10개의 객체를 저장할 수 있는 초기 용량을 가지게 되며 저장되는 객체 수가 증가하면 용량이 자동적으로 증가합니다.

- ArrayList에 특정 인덱스의 객체를 제거하면 자동으로 바로 뒤 인덱스부터 마지막 인덱스까지 모두 앞으로 1칸씩 당겨집니다.




* LinkedList

- LinkedList는 List 인터페이스를 구현한 클래스이며 ArrayList와 사용 방법은 같지만 내부 구조는 완전히 다릅니다.

- ArrayList는 내부 배열에 객체를 저장하여 인덱스로 관리하지만 LinkedList는 인접 참조를 링크하여 체인처럼 관리합니다.

- ArrayList는 특정 인덱스의 객체를 제거하면 뒤의 모든 객체가 앞으로 한칸씩 당겨지지만, LinkedList는 특정 인덱스의 객체를 제거하면 앞 뒤 링크만 변경되고 나머지 링크는 변경되지 않아 빈번한 객체의 삭제와 삽입이 일어나는 로직에서는 ArrayList보다 좋은 성능을 발휘합니다.





* Set 계열 컬렉션

- Set 컬렉션은 저장 순서를 보장하지 않으며 객체의 중복 저장을 허용하지 않습니다.

- Set 컬렉션은 인덱스로 관리하지 않으며 들어갈 때의 순서와 나올 때의 순서가 다를 수도 있습니다.

- Set 컬렉션은 인덱스로 객체를 검색하는 기능이 없고 전체 객체를 대상으로 한번씩 반복해서 객체의 값을 가져오는 반복자(Iterator)를 제공합니다.

- 반복자는 Iterator 인터페이스를 구현한 객체를 의미하며 이 객체는 Set 인터페이스의 iterator() 메서드를 호출하여 객체를 얻을 수 있습니다.


- Iterator 인터페이스의 주요 메서드

1. hasNext(): 가져올 객체가 있으면 true를 리턴하고 없으면 false를 리턴.
2. next(): 컬렉션에서 하나의 객체를 가져옴.
3. remove(): Set 컬렉션에서 객체를 제거함.

* Set 계열 컬렉션 주요 메서드

- 객체 추가 기능

1. add(E e): 주어진 객체를 저장, 성공적으로 저장되면 true를 리턴, 중복 객체를 저장하면 false를 리턴.


- 객체 검색 기능

1. contains(Object o): 주어진 객체가 저장되어 있는지의 여부를 판단.
2. isEmpty(): 컬렉션이 비어있는지를 조사.
3. iterator(): 저장된 객체를 한번씩 가져오는 반복자 객체를 리턴.
4. size(): 저장되어 있는 전체 객체 수를 리턴.

- 객체 삭제 기능

1. clear(): 저장된 모든 객체를 삭제.
2. remove(Object o): 주어진 객체를 삭제.



* HashSet

- HashSet 클래스는 Set 인터페이스를 구현한 컬렉션이므로 저장된 객체의 순서를 보장하지 않고 중복을 허용하지 않습니다.

- HashSet을 사용하면 많은 양의 데이터를 관리할 때 추가/삭제/검색 등에 있어서 순차적으로 데이터를 관리하는 것에 비하여 속도가 향상됩니다.






* Map 계열 컬렉션

- Map 컬렉션은 키(key)와 값(value)으로 구성된 Entry객체를 저장하는 구조를 가지고 있습니다.

- 키는 중복저장 될 수 없지만 값은 중복저장 될 수 있습니다.

* Map 계열 주요 메서드

- 객체 추가 기능

1. put(K key, V value): 주어진 키와 값을 추가, 정상적으로 저장되면 그 값(value)를 리턴.

- 객체 검색 기능

1. containsKey(Object Key): 주어진 키가 있는지의 여부를 확인.
2. containsValue(Object value): 주어진 값이 있는지의 여부를 확인.
3. get(Object key): 주어진 키에 들어있는 값을 리턴.
4. isEmpty(): 컬렉션이 비어있는지의 여부를 확인.
5. size(): 저장된 키의 총 수를 리턴.
6. values(): 저장된 모든 값을 컬렉션에 담아서 리턴.
7. keySet(): 저장된 모든 키를 Set객체에 담아서 리턴.
8. entrySet(): 키와 값의 쌍으로 구성된 모든 Entry객체를 Set에 담아서 리턴.

- 객체 삭제 기능

1. clear(): 모든 Entry를 삭제
2. remove(Object key): 주어진 키와 일치하는 Entry객체를 삭제.



* HashMap

- HashMap은 Map 인터페이스를 구현한 대표적인 Map 컬렉션입니다.

- 키와 값의 타입은 기본 타입을 사용할 수 없고, 클래스 및 인터페이스 타입만 사용이 가능합니다.







