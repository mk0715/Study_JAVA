


* 예외 처리(Exception)

- 에러에는 심각한 에러(serious error)와 가벼운 에러(mild error)가 있습니다. 심각한 에러는 시스템 상의 문제로 인한 에러로 개발자가 처리할 수 없는 에러를 말합니다. 가벼운 에러는 개발자가 코드를 통해 처리할 수 있는 에러를 말하며 이 방식을 예외처리라고 합니다.

- 예외에는 컴파일러 체크 예외와 실행 예외(Runtime Exception)가 있습니다.

- 컴파일러 체크 예외는 자바 소스를 컴파일하는 과정에서 예외 처리 코드를 검사하여 예외 처리 코드가 없다면 컴파일 오류가 발생합니다.

- 실행 예외는 컴파일하는 과정에서 예외처리 코드를 검사하지 않는 예외를 말합니다.

- 예외 처리는 컴파일 예외와 실행 예외에 대한 대처방법입니다.

- 예외 처리는 시스템 스스로 오류를 복구하는 것이 아니고 오류 발생 가능성이 있는 부분에 대한 처리를 미리 프로그래밍 해주는 것입니다.

- 프로그램에서 문제가 될만한 부분을 예상하여 사전에 "문제가 발생하면 이렇게 처리하라" 라고 프로그래밍 하는 것을 예외 처리라고 합니다.








* 실행 예외(Runtime Exception)

- 실행 예외는 컴파일러가 예외 처리 코드를 체크하지 않기 때문에 오로지 개발자의 경험에 의해서 예외 처리 코드를 삽입해야 합니다.

- 만약 개발자가 실행 예외에 대해 예외처리 코드를 넣지 않았을 경우 해당 예외가 발생하면 프로그램은 곧바로 종료됩니다.

- 주요 실행 예외

1. NullPointerException

- 객체 참조가 없는 상태, 즉 null 값을 갖는 참조 변수로 객체 접근 연산자인 dot(.)를 사용했을 때 발생합니다.

2. ArrayIndexOutOfBoundsException

- 배열에서 인덱스 범위를 초과하여 사용할 경우 발생합니다.

3. NumberFormatException

- 문자열로 되어 있는 데이터를 숫자로 변경하는 경우에 발생합니다.

4. ClassCastException

- 형 변환은 부모 클래스와 자식 클래스간에 발생하고 구현 클래스와 인터페이스 간에도 발생합니다. 이러한 관계가 아니라면 다른 클래스로 타입을 변환할 수 없습니다.

- 상속관계나 인터페이스 관계가 없는 클래스들을 억지로 형 변환 할 경우 발생합니다. 




* try~ catch~ finally

- 프로그램에서 예외가 발생했을 경우 프로그램의 갑작스러운 종료를 막고, 정상 실행을 유지할 수 있도록 처리하는 코드를 예외 처리 코드라고 합니다.

- try~ catch ~ finally 블록은 생성자 내부나 메서드 내부에서 작성되어 컴파일 예외와 실행 예외가 발생할 경우에 예외 처리를 할 수 있게 해줍니다.

- try 블록에는 예외 발생 가능성이 있는 코드를 작성합니다. try 블록의 코드가 예외 발생 없이 정상 실행되면 catch 블록은 실행되지 않습니다.

- try 내부에서 예외가 발생하면 즉시 실행을 멈추고 catch 블록으로 이동하여 예외 처리 코드를 실행합니다.

- 예외 발생 여부와 상관없이 항상 실행할 내용이 있다면 finally 블록 내부에 실행 내용을 작성합니다.







* finally 구문이 실행되지 않는 경우

1. finally 구문 이전에 System.exit() 구문을 호출했을 시
2. 컴퓨터가 꺼져서 시스템이 멈추었을 시
3. finally 블록 내부에서 예외가 발생했을 시





* 다중 catch

- try 블록 내부는 다양한 종류의 예외가 발생할 수 있습니다. 예외가 여러 가지 발생한다면 다중 catch 블록을 작성하여 예외들을 처리합니다.

- 다중 catch 블록을 작성할 때 주의할 점은 상위 예외 클래스가 하위 예외 클래스보다 아래쪽에 위치해야 합니다.

- catch 블록은 위에서부터 차례대로 검색되므로 상위 예외 클래스의 catch 블록이 위에 있다면 하위 예외 클래스의 catch블록은 실행되지 않습니다.

- 자바 7 버전부터 하나의 catch 블록에서 여러 개의 예외를 처리할 수 있도록 기능이 추가되었습니다.

- catch() 괄호 안에 동일하게 처리하고 싶은 예외를 | 로 연결하면 됩니다. 이 방식을 사용할 때는 두 예외가 상속 관계가 있으면 안됩니다.








* throws

- try ~catch 구문이 예외가 발생했을 때 직접 해결을 하고자 하는 코드라면 throws는 메서드나 생성자를 호출한 곳으로 예외를 떠넘기는 코드입니다.

- 즉 예외처리를 직접 수행하지 않고 메서드 호출자에게 예외를 던지는 방법입니다.

- throws 키워드가 붙어있는 메서드는 반드시 try 블록 내부에서 호출되어야 합니다. 그리고 catch블록에서 떠넘겨 받은 예외를 처리해야 합니다.

- main() 메서드에서 throws를 사용하는 것은 예외처리를 JVM에게 넘기겠다는 의미입니다. 그러나 JVM은 그 예외를 직접 처리해주지 않고 예외가 발생하면 예외 메시지만 출력하고 프로그램을 종료시킵니다.





* 예외 강제 발생시키기

- 사용자가 직접 선언한 예외 클래스나 자바가 제공하는 예외 API에서 예외를 강제 발생시키려면 throw라는 키워드를 이용합니다.










* 사용자 정의 예외

- 프로그램을 개발하다보면 자바 표준 API에서 제공하는 예외 클래스만으로 다양한 종류의 예외를 표현할 수 없습니다.

- 개발자가 만든 어플리케이션에서 자체적으로 생길 수 있는 예외는 개발자가 직접 예외 클래스를 정의해서 만들어야 합니다.

- 사용자 정의 예외 클래스는 일반 예외로 선언할 경우 Exception 클래스를 상속하여 사용하고, 실행 예외로 선언할 경우 RuntimeException 클래스를 상속하면 됩니다.

- 사용자 정의 예외 클래스의 이름은 Exception으로 끝나는 것이 좋습니다.










