
* Map 계열 컬렉션

- Map 컬렉션은 키(key)와 값(value)으로 구성된 Entry객체를 저장하는 구조를 가지고 있습니다.

- 키는 중복저장 될 수 없지만 값은 중복저장 될 수 있습니다.

* Map 계열 주요 메서드

- 객체 추가 기능

1. put(K key, V value): 주어진 키와 값을 추가, 정상적으로 저장되면 그 값(value)를 리턴.

- 객체 검색 기능

1. containsKey(Object Key): 주어진 키가 있는지의 여부를 확인.
2. containsValue(Object value): 주어진 값이 있는지의 여부를 확인.
3. get(Object key): 주어진 키에 들어있는 값을 리턴.
4. isEmpty(): 컬렉션이 비어있는지의 여부를 확인.
5. size(): 저장된 키의 총 수를 리턴.
6. values(): 저장된 모든 값을 컬렉션에 담아서 리턴.
7. keySet(): 저장된 모든 키를 Set객체에 담아서 리턴.
8. entrySet(): 키와 값의 쌍으로 구성된 모든 Entry객체를 Set에 담아서 리턴.

- 객체 삭제 기능

1. clear(): 모든 Entry를 삭제
2. remove(Object key): 주어진 키와 일치하는 Entry객체를 삭제.



* HashMap

- HashMap은 Map 인터페이스를 구현한 대표적인 Map 컬렉션입니다.

- 키와 값의 타입은 기본 타입을 사용할 수 없고, 클래스 및 인터페이스 타입만 사용이 가능합니다.




* java.io 패키지

- IO 패키지는 데이터의 입력/출력 기능을 제공하는 클래스들을 가지고 있습니다.

- 프로그램이 데이터를 입력받을 때에는 입력 스트림(InputStream)이라고 부르며, 데이터를 내보낼 때에는 출력 스트림(OutputStream)이라고 부릅니다.

- 스트림 클래스는 크게 두 종류로 구분되는데 하나는 바이트 기반 스트림이고, 다른 하나는 문자 기반 스트림입니다.

- 바이트 기반 스트림은 그림, 멀티미디어, 문자 등 모든 종류의 데이터를 받고 보낼 수 있으며 최상위 클래스로 Input/OutputStream이라는 추상 클래스를 제공합니다.

- 문자 기반 스트림은 오로지 문자만 받고 보낼 수 있으며 최상위 클래스로 Reader/Writer 추상 클래스를 제공합니다.


* InputStream

- InputStream 클래스는 바이트 기반 입력 스트림의 최상위 클래스로 추상 클래스입니다.

- 모든 바이트 기반 입력 스트림은 이 클래스를 상속받아 만들어지며 하위 클래스들은 접미사로 InputStream이 붙습니다.

- InputStream 클래스 주요 메서드

1. read(): 입력 스트림으로부터 1바이트를 읽고 읽은 바이트를 리턴.

2. read(byte[] b): 입력 스트림으로부터 읽은 바이트들을 매개값으로 주어진 바이트 배열에 저장하고 실제로 읽은 바이트 수를 리턴.


* OutputStream 클래스

- OutputStream은 바이트 기반 출력 스트림의 최상위 클래스로 추상 클래스입니다.

- 모든 바이트 기반 출력 스트림 클래스는 이 클래스를 상속받아 만들어지며 하위 클래스들은 접미사로 OutputStream이 붙습니다.

- OutputStream 주요 메서드

1. write(byte b): 출력 스트림으로 1바이트를 내보냄.
2. write(byte[] b): 출력 스트림으로 주어진 바이트 배열 b의 모든 바이트들을 내보냄.



* 문자 기반 스트림 클래스

- Input/OutputStream은 1바이트 단위로 입/출력 동작을 수행하지만 한글의 경우 2바이트이기 때문에 바이트 단위 처리시 글자가 깨질 수 있습니다.

- 이러한 문제점을 없애기 위해 자바에서는 문자나 문자열을을 다룰 때 유니코드 방식을 제공하고 있습니다.

- 유니코드를 사용하는 입/출력 클래스를 Reader와 Writer라고 부르며, 이들을 사용하면 자동으로 바이트가 유니코드화 되므로 한글 같은 2바이트 문자도 정상적으로 처리할 수 있습니다.


* FileReader/Writer

- 이 클래스는 텍스트 파일을 프로그램으로 읽고 쓸 때 사용하는 문자 기반 스트림입니다.

- 문자 단위로 읽고 쓰기 때문에 텍스트가 아닌 그림, 오디오, 비디오 등의 파일은 읽거나 쓸 수 없습니다.




* 보조 스트림

- 보조 스트림이란 다른 스트림과 연결되어 여러가지 편리한 기능을 제공해주는 스트림을 말합니다.

- 보조 스트림은 자체적으로 입/출력을 수행할 수 없기 때문에 입/출력 소스와 바로 연결되는 FileInput/OutputStream이나 FileReader/Writer 등에 연결해서 사용해야 합니다.



* 객체 입/출력 보조 스트림(ObjectInput/OutputStream)

- 자바는 메모리에 생성된 객체를 파일 또는 네트워크로 입/출력할 수 있습니다.

- 객체는 문자가 아니기 때문에 바이트 기반 스트림으로 출력해야 합니다.

- 객체를 출력하기 위해서는 객체의 데이터를 일렬로 늘어선 연속적인 바이트로 변경해야 하는데, 이것을 객체 직렬화(Serialization)이라고 합니다.

- 자바는 Serializable 인터페이스를 구현한 클래스만 직렬화할 수 있도록 제한하고 있습니다.








